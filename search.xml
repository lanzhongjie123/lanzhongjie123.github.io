<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/24/test/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>杂件</tag>
      </tags>
  </entry>
  <entry>
    <title>刘宜好帅，我好爱</title>
    <url>/2020/04/24/life/%E5%88%98%E5%AE%9C%E5%A5%BD%E5%B8%85%EF%BC%8C%E6%88%91%E5%A5%BD%E7%88%B1/</url>
    <content><![CDATA[<p>##第一章</p>
<p>女朋友来个哇，为刘宜招女友</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>KaTex语法测试</title>
    <url>/2020/04/26/test/KaTex/</url>
    <content><![CDATA[<p>$f(x) = sin(x) + 12$</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>杂件</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法测试</title>
    <url>/2020/04/26/test/TestMD/</url>
    <content><![CDATA[<p>#标题<br># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p>
<p>##段落的换行可以使用空行来换行</p>
<a id="more"></a>
<p>#字体<br><em>斜的</em>  <strong>加粗</strong>   <strong><em>粗斜体</em></strong><br>*斜体文本*<br>**粗体文本**<br>***粗斜体文本***</p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="###分割线"></a>###分割线</h2><p>一行中用三个以上的星号、减号、底线<br>-------</p>
<p>###删除线<br><del>我不知道</del><br>~~我不知道~~</p>
<p>###下划线<br><u>画重点</u>  &emsp; &emsp;  &lt;u&gt;画重点&lt;/u&gt;</p>
<p>####行内空格<br>我觉&emsp;得&ensp;这很&nbsp;棒<br>&amp;emsp;  &amp;ensp; &amp;nbsp;</p>
<p>####脚注<br>我喜欢ta[^他]<br>[^他]: 小花生</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>杂件</tag>
      </tags>
  </entry>
  <entry>
    <title>图片上传与文件下载</title>
    <url>/2020/04/25/test/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.设置站点配置_config.yml:将post_asset_folder: <span class="literal">false</span>改为post_asset_folder: <span class="literal">true</span></span><br><span class="line">2.安装插件:npm install https://github.com/CodeFalling/hexo-asset-image -- save</span><br><span class="line">3.运行hexo n <span class="string">"XXXXXX"</span>,生成XXXXX.md博文时就会在/<span class="built_in">source</span>/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</span><br><span class="line">4.添加图片:在想添加的位置写入![](图片名字.图片格式),例如![](1.png)。</span><br></pre></td></tr></table></figure>

<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.首先修改程序配置文件 _config.yml 中的 post_asset_folder:，这个选项设置为 True。</span><br><span class="line"></span><br><span class="line">2.在 <span class="built_in">source</span> 文件夹下创建 \download 文件夹，将我们需要上传的本地文件移动到这个文件夹。（如 test.pdf）</span><br><span class="line"></span><br><span class="line">3.最后在文章中，按照下面的格式引入：</span><br><span class="line"></span><br><span class="line">[ 点击下载文件 ](/download/test.pdf)</span><br><span class="line">4.重新hexo clean, hexo g 和 hexo d 更新就可以了。</span><br></pre></td></tr></table></figure>
<p>转载自：<a href="https://blog.csdn.net/Fitz1318/article/details/86548129">图片上传</a><br>        <a href="http://leungyukshing.cn/archives/HexoUploadFile.html">文件下载</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基本概念</title>
    <url>/2020/05/02/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><pre><code>1、DB：数据库，保存一组有组织的数据的容器
2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据
3、SQL:结构化查询语言，用于和DBMS通信的语言</code></pre><h2 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h2><pre><code>1、将数据放到表中，表再放到库中
2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。
3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。
4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”
5、表中的数据是按行存储的，每一行类似于java中的“对象”。</code></pre><a id="more"></a>
<h2 id="MySQL服务的登录"><a href="#MySQL服务的登录" class="headerlink" title="MySQL服务的登录"></a>MySQL服务的登录</h2><pre><code>方式一：通过mysql自带的客户端
只限于root用户

方式二：通过windows自带的客户端
登录：
mysql 【-h主机名 -P端口号 】-u用户名 -p密码</code></pre><h2 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h2><pre><code>DQL（Data Query Language）：数据查询语言
    select 
DML(Data Manipulate Language):数据操作语言
    insert 、update、delete
DDL（Data Define Languge）：数据定义语言
    create、drop、alter
TCL（Transaction Control Language）：事务控制语言
    commit、rollback</code></pre><h2 id="之后使用到的数据库表"><a href="#之后使用到的数据库表" class="headerlink" title="之后使用到的数据库表"></a>之后使用到的数据库表</h2><p><a href="/download/myemployees.sql"> 点击下载文件 </a><br><img src="/2020/05/02/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E8%A1%A8%E4%B8%8E%E8%A1%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt></p>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>条件查询</title>
    <url>/2020/05/02/MySQL/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 查询列表 from 表名 <span class="built_in">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">简单条件运算符：&gt;  &lt;  =  !=  &lt;&gt;(不等于)  &gt;=  &lt;=  &lt;=&gt;(安全等于)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>案例1</strong>：查询工资&gt;12000的员工信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees WHERE salary&gt;12000;</span><br><span class="line">```	</span><br><span class="line">**案例2**：查询部门编号不等于90号的员工名和部门编号</span><br><span class="line">``` bash</span><br><span class="line">SELECT last_name,department_id FROM employees WHERE department_id&lt;&gt;90;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">逻辑运算符: and(&amp;&amp;)  or(||)  not(!)</span><br></pre></td></tr></table></figure>
<p><strong>案例1</strong>：查询工资在10000到20000之间的员工名、工资以及奖金</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,salary,commission_pct FROM employees WHERE salary&gt;=10000 AND salary&lt;=20000;</span><br><span class="line">```    </span><br><span class="line">**案例2**：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</span><br><span class="line">``` bash</span><br><span class="line">SELECT * FROM employees WHERE NOT(department_id&gt;=90 AND department_id&lt;=110) OR salary&gt;15000;</span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. like	(可以判断字符型，也可以判断数字型的)</span><br><span class="line">2. between and</span><br><span class="line">3. <span class="keyword">in</span></span><br><span class="line">4. is null | is not null</span><br></pre></td></tr></table></figure>
<h4 id="1-like"><a href="#1-like" class="headerlink" title="1.like"></a>1.like</h4><p><strong>案例1</strong>：查询员工名中包含字符<code>a</code>的员工信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from employees <span class="built_in">where</span> last_name like <span class="string">'%a%'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>补充</strong>：通配符(like一般和通配符搭配使用)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% 任意多个字符,包含0个字符</span><br><span class="line">_ 任意单个字符</span><br></pre></td></tr></table></figure>
<p><strong>案例2</strong>：查询员工名中第三个字符为<code>n</code>，第五个字符为<code>l</code>的员工名和工资</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select last_name,salary FROM employees WHERE last_name LIKE <span class="string">'__n_l%'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>案例3</strong>：查询员工名中第二个字符为<code>_</code>的员工名<br><del>Java方式：转义</del>(不推荐)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name FROM employees WHERE last_name LIKE <span class="string">'_\_%'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>补充</strong>：如果要查询的字符是通配符，可以使用这种(推荐)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name FROM employees WHERE last_name LIKE <span class="string">'_$_%'</span> ESCAPE <span class="string">'$'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-between-and"><a href="#2-between-and" class="headerlink" title="2.between and"></a>2.between and</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">①使用between and 可以提高语句的简洁度</span><br><span class="line">②包含临界值</span><br><span class="line">③两个临界值不要调换顺序(因为它严格和 &gt;=  &lt;= 相等) 可以看作就是 &gt;= &lt;= 的简写版。</span><br><span class="line">如果在 id &gt;= 120 AND id &lt;= 100 把 120 和 100 交换位置的话, 这个区别是一定不存在的</span><br></pre></td></tr></table></figure>
<p><strong>案例</strong>：查询员工编号在100到120之间的员工信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees WHERE employee_id &gt;= 120 AND</span><br><span class="line">employee_id&lt;=100;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">SELECT * FROM employees WHERE employee_id BETWEEN 120 AND 100;</span><br></pre></td></tr></table></figure>
<h4 id="3-in"><a href="#3-in" class="headerlink" title="3.in"></a>3.in</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">含义：判断某字段的值是否属于<span class="keyword">in</span>列表中的某一项</span><br><span class="line">特点：</span><br><span class="line">	①使用<span class="keyword">in</span>提高语句简洁度</span><br><span class="line">	②<span class="keyword">in</span>列表的值类型必须一致或兼容</span><br><span class="line">	③<span class="keyword">in</span>列表中不支持通配符</span><br></pre></td></tr></table></figure>
<p><strong>案例</strong>：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,job_id FROM employees WHERE job_id = <span class="string">'IT_PROT'</span> OR job_id = <span class="string">'AD_VP'</span> OR JOB_ID =<span class="string">'AD_PRES'</span>;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">SELECT last_name,job_id FROM employees WHERE job_id IN( <span class="string">'IT_PROT'</span> ,<span class="string">'AD_VP'</span>,<span class="string">'AD_PRES'</span>);</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">不能写成</span><br><span class="line">SELECT last_name,job_id FROM employees WHERE job_id IN( <span class="string">'IT_PROT'</span> ,<span class="string">'AD_%'</span>);</span><br><span class="line">/*把<span class="string">'AD_VP'</span>,<span class="string">'AD_PRES'</span>合并在一起</span><br><span class="line">因为 <span class="keyword">in</span> 是和用 or 的写法严格相等的。如果这样写的话，放在 or 中就是 id = <span class="string">'IT_PROT'</span> OR id = <span class="string">'AD_%'</span>;  </span><br><span class="line">它是用 = 号进行对比的，而不是 like</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h4 id="4-is-null"><a href="#4-is-null" class="headerlink" title="4.is null"></a>4.is null</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">= 或 &lt;&gt; 不能用于判断null值</span><br><span class="line">is null或is not null 可以判断null值</span><br></pre></td></tr></table></figure>
<p><strong>案例1</strong>：查询没有奖金的员工名和奖金率(在表中没有奖金是用null来表示的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NULL;</span><br></pre></td></tr></table></figure>
<p><strong>案例2</strong>：查询有奖金的员工名和奖金率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure>
<p><strong>案例3(补充)</strong>：查询工资为12000的员工信息<br><del>SELECT last_name,salary FROM employees WHERE salary IS 12000;</del><br>IS 不支持比较是否等于一个数值，IS 就是拿来比较 NULL 的。</p>
<h4 id="补充：安全等于-lt-gt"><a href="#补充：安全等于-lt-gt" class="headerlink" title="补充：安全等于  &lt;=&gt;"></a>补充：安全等于  &lt;=&gt;</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">①可以判断NULL值</span><br><span class="line">②又可以判断普通的数值</span><br></pre></td></tr></table></figure>
<p><strong>案例1</strong>：查询没有奖金的员工名和奖金率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL;</span><br></pre></td></tr></table></figure>

<p><strong>案例2</strong>：查询工资为12000的员工信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,salary FROM employees WHERE salary &lt;=&gt; 12000;</span><br></pre></td></tr></table></figure>

<p><strong>is null pk &lt;=&gt;</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IS NULL:仅仅可以判断NULL值，可读性较高，建议使用</span><br><span class="line">&lt;=&gt;    :既可以判断NULL值，又可以判断普通的数值，可读性较低</span><br></pre></td></tr></table></figure>

<h4 id="补充面试题"><a href="#补充面试题" class="headerlink" title="补充面试题"></a>补充面试题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">试问：select * from employees; 和 select * from employees <span class="built_in">where</span> commission_pct like <span class="string">'%%'</span> and last_name like <span class="string">'%%'</span>; 结果是否一样? 并说明原因。</span><br></pre></td></tr></table></figure>
<p>不一样。因为 commission_pct 字段有 null 的情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如果是 select * from employees <span class="built_in">where</span> commission_pct like <span class="string">'%%'</span> or last_name like <span class="string">'%%'</span> or ...;</span><br><span class="line">表中所有的字段都加上</span><br></pre></td></tr></table></figure>
<p>一样，因为 <del>不可能所有字段都为 null</del>   ?  (不太确定)</p>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>基础查询</title>
    <url>/2020/05/01/MySQL/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 查询列表 from 表名;</span><br></pre></td></tr></table></figure>
<p><strong>查询列表</strong>：<br>1、查询列表可以是：表中的字段、常量值、表达式、函数<br>2、查询的结果是一个虚拟的表格</p>
<h3 id="查询字段"><a href="#查询字段" class="headerlink" title="查询字段"></a>查询字段</h3><p>1.查询表中的单个字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name FROM employees;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.查询表中的多个字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name,salary,email FROM employees;</span><br></pre></td></tr></table></figure>
<p>3.查询表中的所有字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure>
<p><strong>补充</strong>：如果你的字段名和MySQL的关键字冲突，那么可以通过给字段名添加双引号的方式来避免冲突</p>
<h3 id="查询常量值-目前不知道有啥用"><a href="#查询常量值-目前不知道有啥用" class="headerlink" title="查询常量值(目前不知道有啥用)"></a>查询常量值(目前不知道有啥用)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT 100;</span><br><span class="line">SELECT <span class="string">'john'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT 100%98;</span><br></pre></td></tr></table></figure>
<h3 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT VERSION();</span><br></pre></td></tr></table></figure>
<h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><p> ①便于理解<br> ②如果要查询的字段有重名的情况，使用别名可以区分开来</p>
<p><strong>方式一</strong>：使用as</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br></pre></td></tr></table></figure>
<p><strong>方式二</strong>：使用空格</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br></pre></td></tr></table></figure>

<p><strong>补充</strong>：如果你的别名的含有MySQL的关键字比如 out put 中的 out，那么就需要给别名一个双引号(推荐)或者单引号来标识</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT salary AS <span class="string">"out put"</span> FROM employees;</span><br></pre></td></tr></table></figure>
<h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p><strong>引子</strong>：查询员工表中涉及到的所有的部门编号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT department_id FROM employees;</span><br></pre></td></tr></table></figure>

<h3 id="MySQL中的-号"><a href="#MySQL中的-号" class="headerlink" title="MySQL中的 +号"></a>MySQL中的 +号</h3><p><strong>引子</strong>:将员工的姓与名两个字段放在一个字段中显示<br>如果和Java中的字符串连接一样，用+号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select last_name + first_name as 姓名 from employees;</span><br><span class="line">结果显示：</span><br><span class="line">+------+</span><br><span class="line">| 姓名 |</span><br><span class="line">+------+</span><br><span class="line">|    0 |</span><br><span class="line">|    0 |</span><br><span class="line">|    0 | 后面都是0</span><br></pre></td></tr></table></figure>
<p><strong>原因</strong>：<br><strong>在java中的+号</strong>：<br>①运算符，两个操作数都为数值型<br>②连接符，只要有一个操作数为字符串</p>
<p><strong>在mysql中的+号</strong>：<br>仅仅只有一个功能：运算符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 100+90; 两个操作数都为数值型，则做加法运算</span><br><span class="line">只要其中一方为字符型，试图将字符型数值转换成数值型 </span><br><span class="line">select <span class="string">'123'</span>+90;    如果转换成功，则继续做加法运算</span><br><span class="line">select <span class="string">'john'</span>+90;	如果转换失败，则将字符型数值转换成0</span><br><span class="line"></span><br><span class="line">select null+10; 只要其中一方为null，则结果肯定为null</span><br></pre></td></tr></table></figure>
<p>既然不能用 + 号，MySQL有一个concat()函数可以解决这个字符串拼接的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(last_name, <span class="string">' '</span> ,first_name) AS 姓名 FROM employees;</span><br><span class="line">mysql&gt; SELECT CONCAT(last_name, <span class="string">' '</span> ,first_name) AS 姓名 FROM employees;</span><br><span class="line">+-------------------+</span><br><span class="line">| 姓名              |</span><br><span class="line">+-------------------+</span><br><span class="line">| K_ing Steven      |</span><br><span class="line">| Kochhar Neena     |</span><br><span class="line">| De Haan Lex       |</span><br><span class="line">| Hunold Alexander  |</span><br></pre></td></tr></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如果要想加的字段里面含有 null 的话，就会使最后的结果直接为 null.</span><br><span class="line">要避免这种情况的话，可以用 IFNULL()函数 ifnull(&lt;字段&gt;,&lt;要转换成的值&gt;);</span><br><span class="line">如果&lt;字段&gt;为 null, 返回&lt;要转换成的值&gt;, 否则返回原本的值.</span><br><span class="line">isnull();  判断字段或表达式是否为空。如果是，返回 1，否则返回 0.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
