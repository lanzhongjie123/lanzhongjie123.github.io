{"pages":[],"posts":[{"title":"KaTex语法测试","text":"$f(x) = sin(x) + 12$","link":"/2020/04/26/KaTex/"},{"title":"Hello World2","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/25/hello-world%20-%202/"},{"title":"markdown语法测试","text":"#标题# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 ##段落的换行可以使用空行来换行 #字体斜的 加粗 粗斜体*斜体文本***粗体文本*****粗斜体文本*** ###分割线一行中用三个以上的星号、减号、底线------- ###删除线我不知道~~我不知道~~ ###下划线画重点 &emsp; &emsp; &lt;u&gt;画重点&lt;/u&gt; ####行内空格我觉&emsp;得&ensp;这很&nbsp;棒&amp;emsp; &amp;ensp; &amp;nbsp; ####脚注我喜欢ta[^他][^他]: 小花生","link":"/2020/04/26/TestMD/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/24/hello-world/"},{"title":"刘宜好帅，我好爱","text":"##第一章 女朋友来个哇，为刘宜招女友","link":"/2020/04/24/%E5%88%98%E5%AE%9C%E5%A5%BD%E5%B8%85%EF%BC%8C%E6%88%91%E5%A5%BD%E7%88%B1/"},{"title":"基础查询1","text":"#查询 1select 查询列表 from 表名; 查询列表：1、查询列表可以是：表中的字段、常量值、表达式、函数2、查询的结果是一个虚拟的表格 ###查询字段1.查询表中的单个字段 1SELECT last_name FROM employees; 2.查询表中的多个字段 1SELECT last_name,salary,email FROM employees; 3.查询表中的所有字段 1SELECT * FROM employees; 补充：如果你的字段名和MySQL的关键字冲突，那么可以通过给字段名添加双引号的方式来避免冲突 ###查询常量值(目前不知道有啥用) 12SELECT 100;SELECT 'john'; ###查询表达式 1SELECT 100%98; ###查询函数 1SELECT VERSION(); ###起别名 ①便于理解 ②如果要查询的字段有重名的情况，使用别名可以区分开来 方式一：使用as 12SELECT 100%98 AS 结果;SELECT last_name AS 姓,first_name AS 名 FROM employees; 方式二：使用空格 1SELECT last_name 姓,first_name 名 FROM employees; 补充：如果你的别名的含有MySQL的关键字比如 out put 中的 out，那么就需要给别名一个双引号(推荐)或者单引号来标识 1SELECT salary AS \"out put\" FROM employees; ###去重引子：查询员工表中涉及到的所有的部门编号 1SELECT DISTINCT department_id FROM employees; ###MySQL中的 +号引子:将员工的姓与名两个字段放在一个字段中显示如果和Java中的字符串连接一样，用+号 12345678select last_name + first_name as 姓名 from employees;结果显示：+------+| 姓名 |+------+| 0 || 0 || 0 | 后面都是0 原因：在java中的+号：①运算符，两个操作数都为数值型②连接符，只要有一个操作数为字符串 在mysql中的+号：仅仅只有一个功能：运算符 123456select 100+90; 两个操作数都为数值型，则做加法运算只要其中一方为字符型，试图将字符型数值转换成数值型 select '123'+90; 如果转换成功，则继续做加法运算select 'john'+90; 如果转换失败，则将字符型数值转换成0select null+10; 只要其中一方为null，则结果肯定为null 既然不能用 + 号，MySQL有一个concat()函数可以解决这个字符串拼接的问题 123456789SELECT CONCAT(last_name, ' ' ,first_name) AS 姓名 FROM employees;mysql&gt; SELECT CONCAT(last_name, ' ' ,first_name) AS 姓名 FROM employees;+-------------------+| 姓名 |+-------------------+| K_ing Steven || Kochhar Neena || De Haan Lex || Hunold Alexander |","link":"/2020/05/01/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/"}],"tags":[{"name":"杂件","slug":"杂件","link":"/tags/%E6%9D%82%E4%BB%B6/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"}],"categories":[{"name":"测试","slug":"测试","link":"/categories/%E6%B5%8B%E8%AF%95/"},{"name":"Life","slug":"Life","link":"/categories/Life/"},{"name":"MySQL","slug":"MySQL","link":"/categories/MySQL/"},{"name":"基础","slug":"MySQL/基础","link":"/categories/MySQL/%E5%9F%BA%E7%A1%80/"}]}