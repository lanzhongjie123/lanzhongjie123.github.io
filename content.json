{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/24/test/hello-world/"},{"title":"刘宜好帅，我好爱","text":"##第一章 女朋友来个哇，为刘宜招女友","link":"/2020/04/24/life/%E5%88%98%E5%AE%9C%E5%A5%BD%E5%B8%85%EF%BC%8C%E6%88%91%E5%A5%BD%E7%88%B1/"},{"title":"KaTex语法测试","text":"$f(x) = sin(x) + 12$","link":"/2020/04/26/test/KaTex/"},{"title":"markdown语法测试","text":"#标题# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 ##段落的换行可以使用空行来换行 #字体斜的 加粗 粗斜体*斜体文本***粗体文本*****粗斜体文本*** ###分割线一行中用三个以上的星号、减号、底线------- ###删除线我不知道~~我不知道~~ ###下划线画重点 &emsp; &emsp; &lt;u&gt;画重点&lt;/u&gt; ####行内空格我觉&emsp;得&ensp;这很&nbsp;棒&amp;emsp; &amp;ensp; &amp;nbsp; ####脚注我喜欢ta[^他][^他]: 小花生","link":"/2020/04/26/test/TestMD/"},{"title":"图片上传与文件下载","text":"图片上传12341.设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true2.安装插件:npm install https://github.com/CodeFalling/hexo-asset-image -- save3.运行hexo n \"XXXXXX\",生成XXXXX.md博文时就会在/source/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。4.添加图片:在想添加的位置写入![](图片名字.图片格式),例如![](1.png)。 文件下载123456781.首先修改程序配置文件 _config.yml 中的 post_asset_folder:，这个选项设置为 True。2.在 source 文件夹下创建 \\download 文件夹，将我们需要上传的本地文件移动到这个文件夹。（如 test.pdf）3.最后在文章中，按照下面的格式引入：[ 点击下载文件 ](/download/test.pdf)4.重新hexo clean, hexo g 和 hexo d 更新就可以了。 转载自：图片上传 文件下载","link":"/2020/04/25/test/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"},{"title":"数据库基本概念","text":"数据库相关概念1、DB：数据库，保存一组有组织的数据的容器 2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据 3、SQL:结构化查询语言，用于和DBMS通信的语言数据库存储数据的特点1、将数据放到表中，表再放到库中 2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。 3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。 4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性” 5、表中的数据是按行存储的，每一行类似于java中的“对象”。 MySQL服务的登录方式一：通过mysql自带的客户端 只限于root用户 方式二：通过windows自带的客户端 登录： mysql 【-h主机名 -P端口号 】-u用户名 -p密码SQL的语言分类DQL（Data Query Language）：数据查询语言 select DML(Data Manipulate Language):数据操作语言 insert 、update、delete DDL（Data Define Languge）：数据定义语言 create、drop、alter TCL（Transaction Control Language）：事务控制语言 commit、rollback之后使用到的数据库表 点击下载文件","link":"/2020/05/02/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"title":"条件查询","text":"条件查询1select 查询列表 from 表名 where 筛选条件; 条件表达式1简单条件运算符：&gt; &lt; = != &lt;&gt;(不等于) &gt;= &lt;= &lt;=&gt;(安全等于) 案例1：查询工资&gt;12000的员工信息 12345SELECT * FROM employees WHERE salary&gt;12000;``` **案例2**：查询部门编号不等于90号的员工名和部门编号``` bashSELECT last_name,department_id FROM employees WHERE department_id&lt;&gt;90; 逻辑表达式1逻辑运算符: and(&amp;&amp;) or(||) not(!) 案例1：查询工资在10000到20000之间的员工名、工资以及奖金 12345SELECT last_name,salary,commission_pct FROM employees WHERE salary&gt;=10000 AND salary&lt;=20000;``` **案例2**：查询部门编号不是在90到110之间，或者工资高于15000的员工信息``` bashSELECT * FROM employees WHERE NOT(department_id&gt;=90 AND department_id&lt;=110) OR salary&gt;15000; 模糊查询12341. like (可以判断字符型，也可以判断数字型的)2. between and3. in4. is null | is not null 1.like案例1：查询员工名中包含字符a的员工信息 1select * from employees where last_name like '%a%'; 补充：通配符(like一般和通配符搭配使用) 12% 任意多个字符,包含0个字符_ 任意单个字符 案例2：查询员工名中第三个字符为n，第五个字符为l的员工名和工资 1select last_name,salary FROM employees WHERE last_name LIKE '__n_l%'; 案例3：查询员工名中第二个字符为_的员工名Java方式：转义(不推荐) 1SELECT last_name FROM employees WHERE last_name LIKE '_\\_%'; 补充：如果要查询的字符是通配符，可以使用这种(推荐) 1SELECT last_name FROM employees WHERE last_name LIKE '_$_%' ESCAPE '$'; 2.between and1234①使用between and 可以提高语句的简洁度②包含临界值③两个临界值不要调换顺序(因为它严格和 &gt;= &lt;= 相等) 可以看作就是 &gt;= &lt;= 的简写版。如果在 id &gt;= 120 AND id &lt;= 100 把 120 和 100 交换位置的话, 这个区别是一定不存在的 案例：查询员工编号在100到120之间的员工信息 1234SELECT * FROM employees WHERE employee_id &gt;= 120 ANDemployee_id&lt;=100;-----------------------------------------------------------SELECT * FROM employees WHERE employee_id BETWEEN 120 AND 100; 3.in12345含义：判断某字段的值是否属于in列表中的某一项特点： ①使用in提高语句简洁度 ②in列表的值类型必须一致或兼容 ③in列表中不支持通配符 案例：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号 123SELECT last_name,job_id FROM employees WHERE job_id = 'IT_PROT' OR job_id = 'AD_VP' OR JOB_ID ='AD_PRES';----------------------------------------------------------SELECT last_name,job_id FROM employees WHERE job_id IN( 'IT_PROT' ,'AD_VP','AD_PRES'); 注意： 123456不能写成SELECT last_name,job_id FROM employees WHERE job_id IN( 'IT_PROT' ,'AD_%');/*把'AD_VP','AD_PRES'合并在一起因为 in 是和用 or 的写法严格相等的。如果这样写的话，放在 or 中就是 id = 'IT_PROT' OR id = 'AD_%'; 它是用 = 号进行对比的，而不是 like*/ 4.is null12= 或 &lt;&gt; 不能用于判断null值is null或is not null 可以判断null值 案例1：查询没有奖金的员工名和奖金率(在表中没有奖金是用null来表示的) 1SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NULL; 案例2：查询有奖金的员工名和奖金率 1SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NOT NULL; 案例3(补充)：查询工资为12000的员工信息SELECT last_name,salary FROM employees WHERE salary IS 12000;IS 不支持比较是否等于一个数值，IS 就是拿来比较 NULL 的。 补充：安全等于 &lt;=&gt;12①可以判断NULL值②又可以判断普通的数值 案例1：查询没有奖金的员工名和奖金率 1SELECT last_name,commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL; 案例2：查询工资为12000的员工信息 1SELECT last_name,salary FROM employees WHERE salary &lt;=&gt; 12000; is null pk &lt;=&gt; 12IS NULL:仅仅可以判断NULL值，可读性较高，建议使用&lt;=&gt; :既可以判断NULL值，又可以判断普通的数值，可读性较低 补充面试题1试问：select * from employees; 和 select * from employees where commission_pct like '%%' and last_name like '%%'; 结果是否一样? 并说明原因。 不一样。因为 commission_pct 字段有 null 的情况。 12如果是 select * from employees where commission_pct like '%%' or last_name like '%%' or ...;表中所有的字段都加上 一样，因为 不可能所有字段都为 null ? (不太确定)","link":"/2020/05/02/MySQL/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"},{"title":"基础查询","text":"查询1select 查询列表 from 表名; 查询列表：1、查询列表可以是：表中的字段、常量值、表达式、函数2、查询的结果是一个虚拟的表格 查询字段1.查询表中的单个字段 1SELECT last_name FROM employees; 2.查询表中的多个字段 1SELECT last_name,salary,email FROM employees; 3.查询表中的所有字段 1SELECT * FROM employees; 补充：如果你的字段名和MySQL的关键字冲突，那么可以通过给字段名添加双引号的方式来避免冲突 查询常量值(目前不知道有啥用)12SELECT 100;SELECT 'john'; 查询表达式1SELECT 100%98; 查询函数1SELECT VERSION(); 起别名 ①便于理解 ②如果要查询的字段有重名的情况，使用别名可以区分开来 方式一：使用as 12SELECT 100%98 AS 结果;SELECT last_name AS 姓,first_name AS 名 FROM employees; 方式二：使用空格 1SELECT last_name 姓,first_name 名 FROM employees; 补充：如果你的别名的含有MySQL的关键字比如 out put 中的 out，那么就需要给别名一个双引号(推荐)或者单引号来标识 1SELECT salary AS \"out put\" FROM employees; 去重引子：查询员工表中涉及到的所有的部门编号 1SELECT DISTINCT department_id FROM employees; MySQL中的 +号引子:将员工的姓与名两个字段放在一个字段中显示如果和Java中的字符串连接一样，用+号 12345678select last_name + first_name as 姓名 from employees;结果显示：+------+| 姓名 |+------+| 0 || 0 || 0 | 后面都是0 原因：在java中的+号：①运算符，两个操作数都为数值型②连接符，只要有一个操作数为字符串 在mysql中的+号：仅仅只有一个功能：运算符 123456select 100+90; 两个操作数都为数值型，则做加法运算只要其中一方为字符型，试图将字符型数值转换成数值型 select '123'+90; 如果转换成功，则继续做加法运算select 'john'+90; 如果转换失败，则将字符型数值转换成0select null+10; 只要其中一方为null，则结果肯定为null 既然不能用 + 号，MySQL有一个concat()函数可以解决这个字符串拼接的问题 123456789SELECT CONCAT(last_name, ' ' ,first_name) AS 姓名 FROM employees;mysql&gt; SELECT CONCAT(last_name, ' ' ,first_name) AS 姓名 FROM employees;+-------------------+| 姓名 |+-------------------+| K_ing Steven || Kochhar Neena || De Haan Lex || Hunold Alexander | 补充1234如果要想加的字段里面含有 null 的话，就会使最后的结果直接为 null.要避免这种情况的话，可以用 IFNULL()函数 ifnull(&lt;字段&gt;,&lt;要转换成的值&gt;);如果&lt;字段&gt;为 null, 返回&lt;要转换成的值&gt;, 否则返回原本的值.isnull(); 判断字段或表达式是否为空。如果是，返回 1，否则返回 0.","link":"/2020/05/01/MySQL/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/"}],"tags":[{"name":"杂件","slug":"杂件","link":"/tags/%E6%9D%82%E4%BB%B6/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"}],"categories":[{"name":"测试","slug":"测试","link":"/categories/%E6%B5%8B%E8%AF%95/"},{"name":"Life","slug":"Life","link":"/categories/Life/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"MySQL","slug":"MySQL","link":"/categories/MySQL/"},{"name":"基础","slug":"MySQL/基础","link":"/categories/MySQL/%E5%9F%BA%E7%A1%80/"}]}